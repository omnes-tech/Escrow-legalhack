// SPDX-License-Identifier: MIT
pragma solidity ^0.8.27;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "../interfaces/IEscrow.sol";
import "../interfaces/IEscrowErrors.sol";

/**
 * @title BaseEscrow - A Funda√ß√£o S√≥lida do Escrow
 * @notice Contrato abstrato com funcionalidades base para o sistema de cust√≥dia
 * 
 * üèõÔ∏è ANALOGIA: √â como as funda√ß√µes de um pr√©dio - voc√™ n√£o v√™, mas tudo depende dela
 *              Define as regras b√°sicas que todos os escrows devem seguir
 * 
 * RESPONSABILIDADES PRINCIPAIS:
 * üîê Controle de acesso (apenas o dono pode mudar regras importantes)
 * üõ°Ô∏è Prote√ß√£o contra reentrancy (evita ataques de hackers)
 * üí∞ Gest√£o de taxas da plataforma
 * üìã Lista de tokens permitidos (whitelist de seguran√ßa)
 * üßÆ C√°lculos matem√°ticos b√°sicos
 * 
 * HERAN√áAS IMPORTADAS:
 * üëë Ownable: Sistema de propriet√°rio (apenas o dono pode fazer certas coisas)
 * üõ°Ô∏è ReentrancyGuard: Prote√ß√£o contra ataques de reentrada
 * üìú IEscrow: Interface que define as fun√ß√µes obrigat√≥rias
 * ‚ùå IEscrowErrors: Cat√°logo de erros personalizados
 */
abstract contract BaseEscrow is Ownable, ReentrancyGuard, IEscrow, IEscrowErrors {
    
    // ========================================================================
    // VARI√ÅVEIS DE ESTADO (A Mem√≥ria do Cart√≥rio)
    // ========================================================================
    
    /**
     * @notice Taxa da plataforma em pontos base (1 ponto base = 0.01%)
     * @dev M√°ximo permitido √© 9999 (99.99%) para evitar taxas abusivas
     * 
     * üí∞ ANALOGIA: √â como a comiss√£o que o cart√≥rio cobra pelos seus servi√ßos
     *              Se platformFeeBP = 250, significa 2.5% de taxa
     * 
     * EXEMPLOS PR√ÅTICOS:
     * - 100 = 1% de taxa
     * - 250 = 2.5% de taxa  
     * - 500 = 5% de taxa
     * - 1000 = 10% de taxa
     */
    uint256 public platformFeeBP;
    
    /**
     * @notice Pr√≥ximo ID √∫nico que ser√° usado para criar uma cust√≥dia
     * @dev Incrementa automaticamente a cada nova cust√≥dia criada
     * 
     * üìä ANALOGIA: √â como o n√∫mero sequencial dos protocolos no cart√≥rio
     *              Cada documento tem um n√∫mero √∫nico crescente
     * 
     * SEGURAN√áA: Come√ßa em 1 (n√£o 0) para evitar confus√µes
     */
    uint256 internal _nextEscrowId;

    /**
     * @notice Lista de tokens ERC20 permitidos no sistema
     * @dev Mapping: endere√ßo_do_token => true/false
     * 
     * üèõÔ∏è ANALOGIA: √â como uma lista de bancos autorizados a operar no pa√≠s
     *              S√≥ aceita moedas que foram previamente aprovadas
     * 
     * SEGURAN√áA: Evita que tokens maliciosos sejam usados
     * EXEMPLO: isAllowedToken[USDC_ADDRESS] = true
     */
    mapping(address => bool) public isAllowedToken;
    
    /**
     * @notice Lista de NFTs espec√≠ficos permitidos no sistema
     * @dev Mapping: endere√ßo_do_contrato => id_do_token => true/false
     * 
     * üñºÔ∏è ANALOGIA: √â como uma galeria de arte que s√≥ aceita obras certificadas
     *              Cada NFT precisa ser aprovado individualmente
     * 
     * USO: Para garantias com NFTs espec√≠ficos de valor conhecido
     * EXEMPLO: isAllowedERC721AndERC1155[BORED_APES][123] = true
     */
    mapping(address => mapping(uint256 => bool)) public isAllowedERC721AndERC1155;

    // ========================================================================
    // CONSTRUCTOR (Nascimento do Cart√≥rio)
    // ========================================================================
    
    /**
     - Estabelecendo as Regras Fundamentais
     * @notice Inicializa o cart√≥rio com taxa definida e seguran√ßa ativada
     * @param _platformFeeBP Taxa da plataforma em pontos base (m√°ximo 9999)
     * 
     * üéØ ANALOGIA: √â como o ato de funda√ß√£o de um cart√≥rio - define as regras
     *              b√°sicas que nunca mudam e estabelece quem √© o propriet√°rio
     * 
     * VALIDA√á√ïES CR√çTICAS:
     * ‚úÖ Taxa n√£o pode ser 100% ou mais (seria confisco)
     * ‚úÖ Propriet√°rio √© definido como quem deplorou o contrato
     * ‚úÖ Contador de cust√≥dias come√ßa em 1 (n√£o 0)
     * 
     * SEGURAN√áA APLICADA:
     * üõ°Ô∏è Ownable(msg.sender): Define deployer como owner
     * üîí Valida√ß√£o de taxa m√°xima
     * üìä Inicializa√ß√£o segura do contador
     */
    constructor(uint256 _platformFeeBP) Ownable(msg.sender) {
        // VALIDA√á√ÉO: Taxa n√£o pode ser 100% ou mais
        if (_platformFeeBP >= 10000) revert InvalidFee();
        
        // CONFIGURA√á√ÉO: Salvar taxa v√°lida
        platformFeeBP = _platformFeeBP;
        
        // INICIALIZA√á√ÉO: Primeiro escrow ter√° ID 1
        _nextEscrowId = 1;
    }

    // ========================================================================
    // FUN√á√ïES ADMINISTRATIVAS (Poderes do Propriet√°rio)
    // ========================================================================
    
    /**
     setPlatformFeeBP - Ajustando as Taxas
     * @notice Permite ao propriet√°rio alterar a taxa da plataforma
     * @param _feeBP Nova taxa em pontos base (m√°ximo 9999)
     * 
     * üíº ANALOGIA: √â como o governo ajustar impostos - s√≥ quem tem autoridade
     *              pode fazer, e h√° limites para evitar abusos
     * 
     * RESTRI√á√ïES:
     * üëë Apenas o propriet√°rio pode chamar
     * üìä Taxa m√°xima √© 99.99% (evita confisco)
     * 
     * CASOS DE USO:
     * - Ajustar taxa baseado na demanda do mercado
     * - Promo√ß√µes tempor√°rias (reduzir taxa)
     * - Adequa√ß√£o a regulamenta√ß√µes
     */
    function setPlatformFeeBP(uint256 _feeBP) external onlyOwner {
        // VALIDA√á√ÉO: Nova taxa deve estar dentro dos limites
        if (_feeBP >= 10000) revert InvalidFee();
        
        // ATUALIZA√á√ÉO: Aplicar nova taxa
        platformFeeBP = _feeBP;
    }

    /**
      setAllowedToken - Gerenciando Lista de Moedas
     * @notice Adiciona ou remove tokens ERC20 da lista de permitidos
     * @param _token Endere√ßo do contrato do token
     * @param _allowed true para permitir, false para bloquear
     * 
     * üè¶ ANALOGIA: √â como o Banco Central autorizar ou suspender uma moeda
     *              estrangeira para uso no pa√≠s
     * 
     * EXEMPLOS DE USO:
     * - Adicionar USDC: setAllowedToken(USDC_ADDRESS, true)
     * - Remover token suspeito: setAllowedToken(SCAM_TOKEN, false)
     * - Atualizar ap√≥s auditoria: setAllowedToken(NEW_TOKEN, true)
     * 
     * SEGURAN√áA:
     * ‚úÖ Apenas propriet√°rio pode modificar
     * ‚úÖ Pode revogar permiss√µes se token se tornar malicioso
     */
    function setAllowedToken(address _token, bool _allowed) external onlyOwner {
        isAllowedToken[_token] = _allowed;
    }

    /**
     setAllowedERC721Or1155 - Curando NFTs Espec√≠ficos
     * @notice Permite ou bloqueia NFTs espec√≠ficos para uso como garantia
     * @param _token Endere√ßo do contrato NFT
     * @param _tokenId ID espec√≠fico do NFT
     * @param _allowed true para permitir, false para bloquear
     * 
     * üé® ANALOGIA: √â como um leil√£o de arte que s√≥ aceita quadros espec√≠ficos
     *              de artistas famosos - cada obra precisa ser aprovada
     * 
     * CASOS DE USO:
     * - Permitir Bored Ape #123: setAllowedERC721Or1155(BAYC, 123, true)
     * - Bloquear NFT roubado: setAllowedERC721Or1155(STOLEN_NFT, 456, false)
     * - Aprovar cole√ß√£o verificada: aprovar IDs individuais de valor
     * 
     * ESTRAT√âGIA DE CURADORIA:
     * üîç An√°lise individual de cada NFT
     * üíé Foco em NFTs de valor comprovado
     * üõ°Ô∏è Prote√ß√£o contra falsifica√ß√µes
     */
    function setAllowedERC721Or1155(address _token, uint256 _tokenId, bool _allowed) external onlyOwner {
        isAllowedERC721AndERC1155[_token][_tokenId] = _allowed;
    }

    // ========================================================================
    // FUN√á√ïES AUXILIARES INTERNAS (Ferramentas do Sistema)
    // ========================================================================
    
    /**
      _calculateFee - Calculadora de Taxas
     * @notice Calcula a taxa da plataforma sobre um valor
     * @param amount Valor base sobre o qual calcular a taxa
     * @return Taxa em wei/unidades do token
     * 
     * üßÆ ANALOGIA: √â como uma calculadora de imposto - voc√™ informa o valor
     *              e ela te diz exatamente quanto deve pagar de taxa
     * 
     * MATEM√ÅTICA APLICADA:
     * Formula: (amount √ó platformFeeBP) √∑ 10000
     * 
     * EXEMPLOS PR√ÅTICOS:
     * - Valor: 1000 USDC, Taxa: 250 (2.5%)
     *   C√°lculo: (1000 √ó 250) √∑ 10000 = 25 USDC de taxa
     * 
     * - Valor: 1 ETH, Taxa: 200 (2%)
     *   C√°lculo: (1 √ó 200) √∑ 10000 = 0.02 ETH de taxa
     * 
     * SEGURAN√áA MATEM√ÅTICA:
     * ‚úÖ N√£o h√° overflow (valores limitados)
     * ‚úÖ Divis√£o por 10000 sempre exata
     * ‚úÖ Resultado sempre ‚â§ valor original
     */
    function _calculateFee(uint256 amount) internal view returns (uint256) {
        return (amount * platformFeeBP) / 10000;
    }
}
